function check_composer_syntax() {
  local target="$1"

  if [ -f "$target/composer.json" ]; then
      [ -z "$(cat "$target/composer.json")" ] && \
        error "composer.json is empty, remove it from GIT repository or fill its content."
      jq . < "$target/composer.json" >/dev/null 2>&1 ; rc=$?
      [ $rc -eq 0 ] || error "composer.json is not a valid JSON file."
  fi

  if [ -f "$target/composer.lock" ]; then
      [ -z "$(cat "$target/composer.lock")" ] && \
        error "composer.lock is empty, generate it with the composer command."
      jq . < "$target/composer.lock" >/dev/null 2>&1 ; rc=$?
      [ $rc -eq 0 ] || error "composer.lock is not a valid JSON file."
  fi
}

function check_composer_json_and_lock() {
  local target="$1"

  if [ ! -f "$target/composer.json" ]; then
      return 0
  fi

  if [ ! -f "$target/composer.lock" ]; then
      error "composer.lock has not been found, please lock the dependencies of your project."
  fi
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    # If there is no composer.json, we install nothing
    if [ ! -f "$target/composer.json" ] ; then
      return 0
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR
    mkdir -p "$target/vendor/composer/bin"

    local checksum=$(curl --silent "${S3_URL}/composer/composer.phar.md5")

    status "Vendoring Composer"
    if [ ! -f "$CACHE_DIR/composer.phar.md5" ] || [ "$(cat $CACHE_DIR/composer.phar.md5)" != "$checksum" ]; then
        echo "Updating Composer" | indent
        curl --silent "${S3_URL}/composer/composer.phar" > "$CACHE_DIR/composer.phar" | indent
        chmod a+x "$CACHE_DIR/composer.phar"
        echo "$checksum" > $CACHE_DIR/composer.phar.md5
    fi

    cp "$CACHE_DIR/composer.phar" "$target/vendor/composer/bin/"

    local required_extensions=$(jq --raw-output '.require | keys | .[]' < "$BUILD_DIR/composer.json" | grep '^ext-' | sed 's/^ext-//')
    if [ -n "$required_extensions" ]; then
        status "Bundling additional extensions $required_extensions"
        for ext in $required_extensions; do
            echo "$ext" | indent
            # TODO: Find a better way to ignore extensions which were not found in S3
            if [ "$ext" = "memcached" ] ; then
              fetch_package "libmemcached-${memcached_version}" "/app/vendor/libmemcached" | indent
            fi
            fetch_package "ext/$(php_api_version)/php-${ext}" "/app/vendor/php" 2>/dev/null || true | indent
            ls -R "/app/vendor/php" | awk '/:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,"");s=$0;f=1;next} NF&&f{ print s"/"$0 }'
            if [ "$ext" = "geos" ] ; then
              mv "/app/vendor/php/lib/php/extensions/no-debug-non-zts-$(php_api_version)/libgeos*" /usr/local/lib/
              mv "/app/vendor/php/lib/php/extensions/no-debug-non-zts-$(php_api_version)/geos" /usr/local/lib/
            fi
        done
    fi

    php "vendor/composer/bin/composer.phar" self-update

    if [ -n "$COMPOSER_GITHUB_TOKEN" ]; then
        status "Configuring the github authentication for Composer"
        php "vendor/composer/bin/composer.phar" config -g github-oauth.github.com "$COMPOSER_GITHUB_TOKEN" --no-interaction
    fi

    status "Installing application dependencies with Composer"
    {
	local devopt="--no-dev"
	local dev=${COMPOSER_DEV:=false}
	[ "x$dev" = "xtrue" ] && devopt="--dev"

        cd "$target"
        php "vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction \
            $devopt
        cd "$cwd"
    } | indent
}

